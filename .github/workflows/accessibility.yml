name: Accessibility Tests

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:

jobs:
  accessibility:
    runs-on: ubuntu-latest
    
    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: root
          MYSQL_DATABASE: wordpress_test
        ports:
          - 3306:3306
        options: --health-cmd="mysqladmin ping" --health-interval=10s --health-timeout=5s --health-retries=3

    strategy:
      fail-fast: false
      matrix:
        php: [7.4, 8.0, 8.1, 8.2]
        wordpress: [latest, '6.3', '6.2']
        exclude:
          # Exclude incompatible combinations
          - php: 8.2
            wordpress: '6.2'
          - php: 8.1
            wordpress: '6.2'

    steps:
    - uses: actions/checkout@v3

    - name: Setup PHP
      uses: shivammathur/setup-php@v2
      with:
        php-version: ${{ matrix.php }}
        extensions: dom, curl, libxml, mbstring, zip, pcntl, pdo, sqlite, mysql, gd
        coverage: none
        tools: composer:v2

    - name: Setup Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '18'
        cache: 'npm'

    - name: Get Composer Cache Directory
      id: composer-cache
      run: echo "dir=$(composer config cache-files-dir)" >> $GITHUB_OUTPUT

    - name: Cache Composer dependencies
      uses: actions/cache@v3
      with:
        path: ${{ steps.composer-cache.outputs.dir }}
        key: ${{ runner.os }}-composer-${{ hashFiles('**/composer.lock') }}
        restore-keys: ${{ runner.os }}-composer-

    - name: Cache npm dependencies
      uses: actions/cache@v3
      with:
        path: ~/.npm
        key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
        restore-keys: ${{ runner.os }}-node-

    - name: Install npm dependencies
      run: |
        npm ci
        npm install -g pa11y-ci axe-core lighthouse puppeteer

    - name: Install Composer dependencies
      run: composer install --prefer-dist --no-progress

    - name: Make install script executable
      run: chmod +x bin/install-wp-tests.sh

    - name: Setup WordPress
      run: |
        bash bin/install-wp-tests.sh wordpress_test root root localhost ${{ matrix.wordpress }}

    - name: Run PHPUnit Accessibility Tests
      run: |
        mkdir -p test-results
        vendor/bin/phpunit --configuration phpunit.xml.dist --testsuite accessibility --log-junit test-results/phpunit.xml

    - name: Start WordPress Server
      run: |
        php -S localhost:8080 -t wordpress &
        sleep 5
        curl -s http://localhost:8080 > /dev/null

    - name: Run Pa11y Tests
      run: |
        mkdir -p pa11y-results
        pa11y-ci --config .pa11yci.json --json > pa11y-results/results.json || true
        echo "Pa11y tests completed"

    - name: Run Axe Tests
      run: |
        mkdir -p axe-results
        axe --exit --save axe-results/results.json http://localhost:8080 || true
        echo "Axe tests completed"

    - name: Run Lighthouse Accessibility Audit
      run: |
        mkdir -p lighthouse-results
        lighthouse --config-path .lighthouserc.json --output json --output html --output-path ./lighthouse-results/ || true
        echo "Lighthouse audit completed"

    - name: Upload Accessibility Reports
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: accessibility-reports-php${{ matrix.php }}-wp${{ matrix.wordpress }}
        path: |
          pa11y-results/
          axe-results/
          lighthouse-results/
          test-results/
        retention-days: 14

  report:
    needs: accessibility
    runs-on: ubuntu-latest
    if: always()
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Download all artifacts
      uses: actions/download-artifact@v3
      
    - name: Generate Summary Report
      run: |
        echo "# Accessibility Test Results" > $GITHUB_STEP_SUMMARY
        echo "## Test Matrix Results" >> $GITHUB_STEP_SUMMARY
        
        for dir in accessibility-reports-*; do
          if [ -d "$dir" ]; then
            echo "### $dir" >> $GITHUB_STEP_SUMMARY
            
            if [ -f "$dir/pa11y-results/results.json" ]; then
              echo "#### Pa11y Results" >> $GITHUB_STEP_SUMMARY
              cat "$dir/pa11y-results/results.json" >> $GITHUB_STEP_SUMMARY
            fi
            
            if [ -f "$dir/axe-results/results.json" ]; then
              echo "#### Axe Results" >> $GITHUB_STEP_SUMMARY
              cat "$dir/axe-results/results.json" >> $GITHUB_STEP_SUMMARY
            fi
            
            if [ -f "$dir/test-results/phpunit.xml" ]; then
              echo "#### PHPUnit Results" >> $GITHUB_STEP_SUMMARY
              cat "$dir/test-results/phpunit.xml" >> $GITHUB_STEP_SUMMARY
            fi
          fi
        done
